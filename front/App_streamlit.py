import streamlit as st
import requests
from PIL import Image
import os
from datetime import datetime
import pytz
from langchain.llms import LlamaCpp
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
import json

# Definir URL da API Flask
API_URL = "http://localhost:5000"

st.title("Interface para CRUD de Usu√°rios")

# Criar aba de navega√ß√£o
aba = st.sidebar.radio("Menu", ["Listar Usu√°rios", "Cadastrar Usu√°rio", "Ver Imagens do Banco", "Or√°culo"])

# Criar pasta para armazenar imagens tempor√°rias
if not os.path.exists("temp_images"):
    os.makedirs("temp_images")

# Fun√ß√£o para formatar data
def formatar_data(data_str):
    try:
        # Converte a string para um objeto datetime (UTC)
        data_obj = datetime.strptime(data_str, "%Y-%m-%dT%H:%M:%S.%fZ")
        
        # Define o fuso hor√°rio UTC
        utc = pytz.UTC
        data_obj = utc.localize(data_obj)
        
        # Converte para o fuso hor√°rio de S√£o Paulo
        fuso_sp = pytz.timezone('America/Sao_Paulo')
        data_local = data_obj.astimezone(fuso_sp)
        
        # Retorna no formato brasileiro (dd/mm/yyyy HH:mm:ss)
        return data_local.strftime("%d/%m/%Y %H:%M:%S")
    except Exception as e:
        print(f"Erro ao formatar data: {str(e)}")  # Log para debug
        return "Data inv√°lida"

# Configura√ß√£o do modelo Llama
@st.cache_resource
def load_llm():
    llm = LlamaCpp(
        model_path="models/llama-2-7b-chat.gguf",  # Ajuste o caminho do seu modelo
        temperature=0.1,
        max_tokens=2000,
        top_p=1,
        verbose=True,
        n_ctx=2048
    )
    return llm

# Template para an√°lise de dados
ANALYSIS_TEMPLATE = """
Voc√™ √© um assistente especializado em an√°lise de dados de usu√°rios.
Analise os dados fornecidos e responda √† pergunta do usu√°rio.

Dados dos usu√°rios:
{users_data}

Pergunta do usu√°rio:
{question}

Forne√ßa uma resposta clara e concisa baseada apenas nos dados fornecidos.
Se n√£o for poss√≠vel responder com os dados dispon√≠veis, explique educadamente.

Resposta:"""

if aba == "Listar Usu√°rios":
    st.header("Lista de Usu√°rios")

    response = requests.get(f"{API_URL}/get_users")

    if response.status_code == 200:
        users = response.json()
        for user in users:
            with st.expander(f"üë§ {user['nome']}", expanded=True):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    # Informa√ß√µes do usu√°rio
                    st.write(f"üìÖ Data de Nascimento: {user['data_nascimento']}")
                    
                    # Formatando a data de cria√ß√£o e atualiza√ß√£o
                    created_at = formatar_data(user["created_at"]["$date"]) if isinstance(user["created_at"], dict) else user["created_at"]
                    updated_at = formatar_data(user["updated_at"]["$date"]) if isinstance(user["updated_at"], dict) else user["updated_at"]
                    
                    st.write(f"üïí Criado em: {created_at}")
                    st.write(f"üïí Atualizado em: {updated_at}")

                    # Baixar a imagem do GridFS
                    if 'image_id' in user:
                        try:
                            download_response = requests.get(
                                f"{API_URL}/download_image/{user['image_id']}", 
                                headers={'Accept': 'image/*'}
                            )
                            
                            if download_response.status_code == 200:
                                st.image(download_response.content, width=150)
                            else:
                                st.error(f"Erro ao baixar a imagem: {download_response.status_code}")
                        except Exception as e:
                            st.error(f"Erro ao exibir a imagem: {str(e)}")
                    else:
                        st.warning("Usu√°rio n√£o possui imagem")

                with col2:
                    # Bot√µes de a√ß√£o
                    if st.button("‚úèÔ∏è Editar", key=f"edit_{user['id']}"):
                        st.session_state.editing_user = user['id']
                        st.session_state.editing_name = user['nome']
                        st.session_state.editing_birth = user['data_nascimento']

                    if st.button("üóëÔ∏è Deletar", key=f"delete_{user['id']}"):
                        if requests.delete(f"{API_URL}/delete_user/{user['id']}").status_code == 200:
                            st.success(f"Usu√°rio {user['nome']} deletado com sucesso!")
                            st.rerun()
                        else:
                            st.error(f"Erro ao deletar o usu√°rio {user['nome']}")

                # Formul√°rio de edi√ß√£o (aparece quando o bot√£o Editar √© clicado)
                if hasattr(st.session_state, 'editing_user') and st.session_state.editing_user == user['id']:
                    st.markdown("### ‚úèÔ∏è Editar Usu√°rio")
                    
                    novo_nome = st.text_input("Nome", value=st.session_state.editing_name)
                    nova_data = st.date_input("Data de Nascimento", 
                                            value=datetime.strptime(st.session_state.editing_birth, "%Y-%m-%d").date())
                    nova_imagem = st.file_uploader("Nova Imagem (opcional)", 
                                                 type=["jpg", "png", "jpeg"], 
                                                 key=f"image_{user['id']}")

                    col3, col4 = st.columns([1, 2])
                    with col3:
                        if st.button("üíæ Salvar", key=f"save_{user['id']}"):
                            files = {"imagem": nova_imagem} if nova_imagem else None
                            data = {
                                "nome": novo_nome,
                                "data_nascimento": str(nova_data)
                            }
                            
                            response = requests.put(
                                f"{API_URL}/update_user/{user['id']}", 
                                files=files, 
                                data=data
                            )

                            if response.status_code == 200:
                                st.success("Usu√°rio atualizado com sucesso!")
                                del st.session_state.editing_user
                                st.rerun()
                            else:
                                st.error("Erro ao atualizar usu√°rio.")
                    
                    with col4:
                        if st.button("‚ùå Cancelar", key=f"cancel_{user['id']}"):
                            del st.session_state.editing_user
                            st.rerun()

            st.markdown("---")  # Separador entre usu√°rios
    else:
        st.error("Erro ao buscar usu√°rios do banco de dados")

elif aba == "Cadastrar Usu√°rio":
    st.header("Cadastro de Usu√°rio")
           
    nome = st.text_input("Nome")
    data_nascimento = st.date_input("Data de Nascimento")
    imagem = st.file_uploader("Selecione uma imagem", type=["jpg", "png", "jpeg"])

    if st.button("Cadastrar"):
        if nome and data_nascimento and imagem:
            files = {"imagem": imagem}
            data = {"nome": nome, "data_nascimento": str(data_nascimento)}
            response = requests.post(f"{API_URL}/add_user", files=files, data=data)

            if response.status_code == 201:
                st.success("Usu√°rio cadastrado com sucesso!")
            else:
                st.error("Erro ao cadastrar usu√°rio.")
        else:
            st.error("Preencha todos os campos!")

# Adicionar a nova se√ß√£o para ver imagens do banco
elif aba == "Ver Imagens do Banco":
    st.header("Imagens Armazenadas no Banco")
    
    # Buscar todos os usu√°rios para obter os IDs das imagens
    response = requests.get(f"{API_URL}/get_users")
    
    if response.status_code == 200:
        users = response.json()
        
        for user in users:
            st.write(f"üë§ Nome: {user['nome']}")
            st.write(f"üìÖ Data de Nascimento: {user['data_nascimento']}")
            
            if 'image_id' in user:
                try:
                    # Vers√£o alternativa usando download_image
                    download_response = requests.get(
                        f"{API_URL}/download_image/{user['image_id']}", 
                        headers={'Accept': 'image/*'}  # Indica que esperamos uma imagem
                    )
                    
                    if download_response.status_code == 200:
                        # Exibir a imagem diretamente dos bytes recebidos
                        st.image(download_response.content, width=150)
                        st.write(f"üìù Nome do arquivo: {user['imagem']}")
                        st.write(f"üîç ID no GridFS: {user['image_id']}")
                    else:
                        st.error(f"Erro ao baixar a imagem: {download_response.status_code}")
                        st.write(f"Resposta do servidor: {download_response.text}")
                except Exception as e:
                    st.error(f"Erro ao processar a imagem: {str(e)}")
                    print(f"[ERRO] Detalhes: {str(e)}")  # Log para debug
            else:
                st.warning("Usu√°rio n√£o possui imagem no banco")
            
            st.markdown("---")  # Separador entre usu√°rios
    else:
        st.error("Erro ao buscar usu√°rios do banco de dados")

elif aba == "Or√°culo":
    st.header("üîÆ Or√°culo - Consulta Inteligente")
    st.write("Fa√ßa perguntas sobre os dados dos usu√°rios cadastrados")
    
    try:
        llm = load_llm()
        prompt = PromptTemplate(
            template=ANALYSIS_TEMPLATE,
            input_variables=["users_data", "question"]
        )
        chain = LLMChain(llm=llm, prompt=prompt)
    except Exception as e:
        st.error(f"Erro ao carregar o modelo de IA: {str(e)}")
        st.stop()
    
    response = requests.get(f"{API_URL}/get_users")
    
    if response.status_code == 200:
        users_data = response.json()
        
        # Mostrar estat√≠sticas b√°sicas
        with st.expander("üìä Estat√≠sticas Gerais", expanded=True):
            st.write(f"Total de usu√°rios: {len(users_data)}")
            st.write(f"√öltima atualiza√ß√£o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Campo para pergunta
        user_question = st.text_input(
            "üí≠ Fa√ßa sua pergunta ao or√°culo:",
            placeholder="Ex: Qual o usu√°rio mais antigo? Quantos usu√°rios nasceram em 2000?"
        )
        
        if st.button("üîÆ Consultar"):
            if user_question:
                with st.spinner("Analisando dados..."):
                    try:
                        # Preparar dados para a IA
                        formatted_data = json.dumps(users_data, indent=2, ensure_ascii=False)
                        
                        # Obter resposta da IA
                        response = chain.run({
                            "users_data": formatted_data,
                            "question": user_question
                        })
                        
                        # Mostrar resposta
                        st.success(response)
                        
                        # Mostrar dados analisados
                        with st.expander("üîç Dados analisados"):
                            st.json(users_data)
                    
                    except Exception as e:
                        st.error(f"Erro na an√°lise: {str(e)}")
            else:
                st.warning("Por favor, fa√ßa uma pergunta!")
    
    else:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados. Tente novamente mais tarde.")
    
    # Dicas de uso
    with st.expander("üí° Dicas de perguntas"):
        st.markdown("""
        Voc√™ pode perguntar sobre:
        - Informa√ß√µes sobre usu√°rios espec√≠ficos
        - Estat√≠sticas sobre datas de nascimento
        - Padr√µes nos dados de cadastro
        - An√°lises temporais
        - Compara√ß√µes entre usu√°rios
        - E muito mais! A IA tentar√° responder qualquer pergunta sobre os dados dispon√≠veis
        """)